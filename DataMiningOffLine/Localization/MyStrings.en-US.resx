<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddParameter" xml:space="preserve">
    <value>Add technolocal parameters in analysis</value>
  </data>
  <data name="AnotherCriterion" xml:space="preserve">
    <value>Quality value is not changed. Select a different partitioning criterion</value>
  </data>
  <data name="DataNotGiven" xml:space="preserve">
    <value>The data has not been collected yet</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found</value>
  </data>
  <data name="FileNotFoundMathematical" xml:space="preserve">
    <value>File with trained model was not found. First train the model.</value>
  </data>
  <data name="Over" xml:space="preserve">
    <value>Training completed</value>
  </data>
  <data name="PathWay" xml:space="preserve">
    <value>The path is not specified</value>
  </data>
  <data name="QualityParameters" xml:space="preserve">
    <value>The sample contained only indicators of quality. Select the technological parameters.</value>
  </data>
  <data name="RegimeParameters" xml:space="preserve">
    <value>The sample contains only technological parameters!</value>
  </data>
  <data name="SelectCriterion" xml:space="preserve">
    <value>Select the quality parameter</value>
  </data>
  <data name="SelectedParameters" xml:space="preserve">
    <value>You have not selected any parameters</value>
  </data>
  <data name="SelectPartitioninCriterion" xml:space="preserve">
    <value>Select he criterion for the split</value>
  </data>
  <data name="TimeParameters" xml:space="preserve">
    <value>The data collected for </value>
  </data>
  <data name="TreeBuilding" xml:space="preserve">
    <value>Build the Tree</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning!</value>
  </data>
  <data name="WithoutDefect" xml:space="preserve">
    <value>Among the collected parameters no parameter of the defect. Please, Collect  the data again!</value>
  </data>
  <data name="Absent" xml:space="preserve">
    <value>Data are absent!</value>
  </data>
  <data name="Average" xml:space="preserve">
    <value>Average</value>
  </data>
  <data name="Parameter" xml:space="preserve">
    <value>Parameter #</value>
  </data>
  <data name="ParametersSelected" xml:space="preserve">
    <value>Too many parameters are selected. The number of parameters for each coordinate must be less than 10</value>
  </data>
  <data name="TrainSample" xml:space="preserve">
    <value>It is necessary to train selection.</value>
  </data>
  <data name="SomethingWrong" xml:space="preserve">
    <value>SomethingWrong</value>
  </data>
  <data name="EnName" xml:space="preserve">
    <value>English name</value>
  </data>
  <data name="FormClosing" xml:space="preserve">
    <value>Form closing</value>
  </data>
  <data name="IndexName" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="QuestionSave" xml:space="preserve">
    <value>Do you wanna save changes in the data base?</value>
  </data>
  <data name="RuName" xml:space="preserve">
    <value>Russian name</value>
  </data>
  <data name="ScadaName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ExtruderForce" xml:space="preserve">
    <value>Nm</value>
  </data>
  <data name="ExtruderVelocity" xml:space="preserve">
    <value>U/min</value>
  </data>
  <data name="Force" xml:space="preserve">
    <value>N</value>
  </data>
  <data name="RollBending" xml:space="preserve">
    <value>bar</value>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>°C</value>
  </data>
  <data name="Velocity" xml:space="preserve">
    <value>m/min</value>
  </data>
  <data name="WithD" xml:space="preserve">
    <value>With Defect</value>
  </data>
  <data name="WithoutD" xml:space="preserve">
    <value>Without Defect</value>
  </data>
  <data name="Defects" xml:space="preserve">
    <value> per 10 m²</value>
  </data>
</root>